#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""
import asyncio
import logging
from datetime import datetime

from database import DatabaseManager, init_db
from weather_api import weather_api
from bot import weather_bot
from localization import _

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def send_immediate_notification(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    
    print(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await init_db()
        
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await DatabaseManager.get_user(user_id)
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.city}, —è–∑—ã–∫: {user.language}")
        
        if not user.city or not user.city_lat or not user.city_lon:
            print("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≥–æ—Ä–æ–¥")
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        print("üå§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ...")
        weather_data = await weather_api.get_weather_forecast(
            float(user.city_lat),
            float(user.city_lon),
            user.language
        )
        
        if not weather_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await format_notification_message(weather_data, user.city, user.language)
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await weather_bot.get_weather_keyboard(user.language)
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await weather_bot.bot.send_message(
            chat_id=user.user_id,
            text=message,
            reply_markup=keyboard
        )
        
        # –ó–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥
        await DatabaseManager.log_action(
            user.user_id,
            "test_notification_sent",
            {
                "city": user.city,
                "temperature": weather_data.get("current_temperature"),
                "time": datetime.now().strftime("%H:%M")
            }
        )
        
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        logger.error(f"Error sending notification: {e}", exc_info=True)
    
    finally:
        # –ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await weather_bot.bot.session.close()


async def format_notification_message(weather_data: dict, city: str, language: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    now = datetime.now()
    today_date = now.strftime("%d.%m.%Y")
    current_time = now.strftime("%H:%M")
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –æ–¥–µ–∂–¥–µ
    clothing_advice = weather_api.get_clothing_recommendation(weather_data, language)
    
    # –í–∫–ª—é—á–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if language == "ru":
        weather_title = f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city} –Ω–∞ {today_date} –≤ {current_time}"
    else:
        weather_title = f"üå§ Weather in {city} for {today_date} at {current_time}"
    
    message = weather_title + "\n\n"
    message += _("current_temp", language, 
                temp=weather_data["current_temperature"], 
                feels_like=weather_data["feels_like"]) + "\n"
    message += _("today_range", language, 
                min=weather_data["min_temperature"], 
                max=weather_data["max_temperature"]) + "\n"
    message += f"‚òÅÔ∏è {weather_data['description']}\n"
    message += _("humidity", language, humidity=weather_data["humidity"]) + "\n"
    message += _("wind", language, speed=weather_data["wind_speed"]) + "\n"
    message += _("rain_prob", language, prob=weather_data["rain_probability"]) + "\n\n"
    message += _("recommendation", language, advice=clothing_advice) + "\n\n"
    message += _("have_great_day", language)
    
    return message


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("=" * 40)
    
    # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –Ω–∞ 16:30
    await init_db()
    users = await DatabaseManager.get_users_for_notification("16:30")
    
    if users:
        user_id = users[0].user_id
        print(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –Ω–∞ 16:30")
        await send_immediate_notification(user_id)
    else:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –Ω–∞ 16:30 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main())
