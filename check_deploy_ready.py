#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render.com
"""

import os
import sys
from pathlib import Path

def check_file_exists(filename: str, required: bool = True) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    exists = Path(filename).exists()
    status = "‚úÖ" if exists else ("‚ùå" if required else "‚ö†Ô∏è")
    requirement = "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û" if required else "–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û"
    print(f"{status} {filename} - {requirement}")
    return exists

def check_file_content(filename: str, required_content: list) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"""
    if not Path(filename).exists():
        return False
    
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
        
        missing = []
        for item in required_content:
            if item not in content:
                missing.append(item)
        
        if missing:
            print(f"‚ö†Ô∏è  {filename} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing)}")
            return False
        else:
            print(f"‚úÖ {filename} - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå {filename} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Weather Bot –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render.com")
    print("=" * 60)
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    required_files = [
        "main.py",
        "bot.py", 
        "weather_api.py",
        "database.py",
        "config.py",
        "localization.py",
        "scheduler.py",
        "monitoring.py",
        "requirements.txt",
        "render.yaml"
    ]
    
    for file in required_files:
        if not check_file_exists(file, required=True):
            all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    optional_files = [
        "README.md",
        "RENDER_DEPLOY_GUIDE.md",
        "QUICK_DEPLOY.md",
        ".env.production",
        ".gitignore"
    ]
    
    for file in optional_files:
        check_file_exists(file, required=False)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ render.yaml
    print("\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Render:")
    render_content = [
        "type: web",
        "env: python", 
        "buildCommand",
        "startCommand",
        "uvicorn main:app",
        "TELEGRAM_BOT_TOKEN",
        "DATABASE_URL",
        "WEBHOOK_URL"
    ]
    
    if not check_file_content("render.yaml", render_content):
        all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
    print("\nüì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python:")
    requirements_content = [
        "fastapi",
        "aiogram",
        "uvicorn",
        "sqlalchemy",
        "alembic",
        "psycopg2-binary",
        "apscheduler",
        "httpx",
        "structlog"
    ]
    
    if not check_file_content("requirements.txt", requirements_content):
        all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ main.py
    print("\nüöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä:")
    main_content = [
        "FastAPI",
        "lifespan",
        "/webhook",
        "/health",
        "uvicorn"
    ]
    
    if not check_file_content("main.py", main_content):
        all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ bot.py
    print("\nü§ñ Telegram Bot:")
    bot_content = [
        "aiogram",
        "_get_weather_emoji",
        "handle_hourly_forecast",
        "handle_daily_forecast"
    ]
    
    if not check_file_content("bot.py", bot_content):
        all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
    print("\nüîí Git –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    if Path(".gitignore").exists():
        gitignore_content = [".env", "__pycache__", "*.pyc"]
        check_file_content(".gitignore", gitignore_content)
    else:
        print("‚ö†Ô∏è  .gitignore –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    if all_good:
        print("üéâ –í–°–ï –ì–û–¢–û–í–û –ö –î–ï–ü–õ–û–Æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–æ–∑–¥–∞–π Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
        print("2. –ó–∞–≥—Ä—É–∑–∏ –∫–æ–¥ –Ω–∞ GitHub")
        print("3. –°–æ–∑–¥–∞–π –≤–µ–±-—Å–µ—Ä–≤–∏—Å –Ω–∞ Render.com")
        print("4. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("5. –°–æ–∑–¥–∞–π PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("6. –ù–∞—Å—Ç—Ä–æ–π BetterStack –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print("\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: RENDER_DEPLOY_GUIDE.md")
        print("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: QUICK_DEPLOY.md")
        return 0
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤—ã—à–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
