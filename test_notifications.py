#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import asyncio
import logging
from datetime import datetime, time

from database import DatabaseManager, init_db
from scheduler import notification_scheduler
from config import settings

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_notifications():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = datetime.now()
    current_time_str = now.strftime("%H:%M")
    
    print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time_str}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    users = await DatabaseManager.get_users_for_notification(current_time_str)
    print(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –Ω–∞ {current_time_str}: {len(users)}")
    
    for user in users:
        print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id}: {user.city}, —è–∑—ã–∫: {user.language}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 15-–º–∏–Ω—É—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    test_times = []
    for minute in [0, 15, 30, 45]:
        test_time = now.replace(minute=minute, second=0, microsecond=0)
        test_times.append(test_time.strftime("%H:%M"))
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:")
    for test_time in test_times:
        users = await DatabaseManager.get_users_for_notification(test_time)
        print(f"   {test_time}: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    print(f"\nüìÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
    try:
        status = notification_scheduler.get_scheduler_status()
        print(f"   –ó–∞–ø—É—â–µ–Ω: {status.get('running', False)}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {status.get('job_count', 0)}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏
        jobs = status.get('jobs', [])
        if jobs:
            print("   –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏:")
            for job in jobs[:5]:
                print(f"     - {job['name']}: {job.get('next_run', '–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    return users


async def send_test_notification_to_user(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
    
    try:
        user = await DatabaseManager.get_user(user_id)
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.city}, –≤—Ä–µ–º—è: {user.notification_time}")
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await notification_scheduler.send_test_notification(user_id)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def check_user_settings(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
    
    user = await DatabaseManager.get_user(user_id)
    if not user:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"   –ì–æ—Ä–æ–¥: {user.city}")
    print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {user.city_lat}, {user.city_lon}")
    print(f"   –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user.notification_time}")
    print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {user.notifications_enabled}")
    print(f"   –Ø–∑—ã–∫: {user.language}")
    print(f"   –°–æ–∑–¥–∞–Ω: {user.created_at}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω: {user.updated_at}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    users = await test_notifications()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
    if users:
        user_id = users[0].user_id
        await check_user_settings(user_id)
        
        # –°–ø—Ä–æ—Å–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        print(f"\n‚ùì –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}? (y/n): ", end="")
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å input()
            # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            print("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥...")
        except:
            pass
    else:
        print("\n‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("   1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–∏–ª –≥–æ—Ä–æ–¥")
        print("   2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        print("   3. –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –±–ª–∏–∂–∞–π—à–µ–º—É 15-–º–∏–Ω—É—Ç–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main())
